{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashwin\\\\Documents\\\\GitHub\\\\HackSMU\\\\frontend\\\\src\\\\components\\\\NoteModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './NoteModal.css';\nimport postData from '../ApiAccess';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NoteModal({\n  closeModal,\n  addNote\n}) {\n  _s();\n  const [name, setName] = useState('');\n  const [text, setText] = useState('');\n  const [uploadedFileName, setUploadedFileName] = useState('');\n  const [wordCount, setWordCount] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [combined, setCombined] = useState('');\n  const handleNameChange = e => {\n    const inputName = e.target.value;\n    setName(inputName);\n  };\n  const handleTextChange = e => {\n    const inputText = e.target.value;\n    setText(inputText);\n    const words = inputText.split(/\\s+/).filter(word => word !== '');\n    setWordCount(words.length);\n  };\n  const handleFileUpload = e => {\n    const files = e.target.files;\n    if (files && files.length > 0) {\n      const file = files[0];\n      if (file.type === 'text/plain') {\n        const reader = new FileReader();\n        reader.onload = event => {\n          const fileText = event.target.result;\n          setText(fileText);\n          const words = fileText.split(/\\s+/).filter(word => word !== '');\n          setWordCount(words.length);\n          setErrorMessage('');\n          setUploadedFileName(file.name); // Set the uploaded file name\n        };\n\n        reader.readAsText(file);\n      } else {\n        setErrorMessage('Please upload a .txt file.');\n      }\n    }\n  };\n  const handleSubmit = () => {\n    // Check if either name or text is empty\n    if (!name || !text) {\n      setErrorMessage('Please fill in both name and text fields.');\n    } else if (wordCount > 750) {\n      // Check if word count exceeds the limit\n      setErrorMessage('Word count exceeds the limit (750 words).');\n    } else {\n      // Create a new note object\n      const newNote = {\n        name: name,\n        text: text,\n        wordCount: wordCount\n      };\n\n      // Call the addNote function to add the new note to the array\n      addNote(newNote);\n      console.log(window.location.href.split('3000/')[1]);\n      postData(name, window.location.href.split('3000/')[1], text);\n\n      // Clear the input fields and word count\n      setName('');\n      setText('');\n      setWordCount(0);\n      setErrorMessage('');\n\n      // Close the modal\n      closeModal();\n    }\n  };\n  const handleDownload = () => {\n    const blob = new Blob([text], {\n      type: 'text/plain'\n    });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = uploadedFileName || 'uploaded_text.txt';\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"close-button\",\n        onClick: closeModal,\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"name-input\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Your Name\",\n          value: name,\n          onChange: handleNameChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-upload\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"file-input\",\n          className: \"upload-button\",\n          children: \"Upload File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".txt\",\n          id: \"file-input\",\n          onChange: handleFileUpload,\n          className: \"file-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), uploadedFileName && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"uploaded-file-name\",\n          children: uploadedFileName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        rows: \"4\",\n        cols: \"50\",\n        placeholder: \"Enter text...\",\n        onChange: handleTextChange,\n        value: text,\n        className: \"text-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"word-count-and-button\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"word-count\",\n          children: [wordCount, \"/750 words\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-button\",\n          onClick: handleSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), text && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"download-button\",\n        type: \"button\",\n        onClick: handleDownload,\n        children: \"Download File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(NoteModal, \"p5N956p5bswbv68IYTXfibfVQZ8=\");\n_c = NoteModal;\nexport default NoteModal;\nvar _c;\n$RefreshReg$(_c, \"NoteModal\");","map":{"version":3,"names":["React","useState","postData","jsxDEV","_jsxDEV","NoteModal","closeModal","addNote","_s","name","setName","text","setText","uploadedFileName","setUploadedFileName","wordCount","setWordCount","errorMessage","setErrorMessage","combined","setCombined","handleNameChange","e","inputName","target","value","handleTextChange","inputText","words","split","filter","word","length","handleFileUpload","files","file","type","reader","FileReader","onload","event","fileText","result","readAsText","handleSubmit","newNote","console","log","window","location","href","handleDownload","blob","Blob","url","URL","createObjectURL","a","document","createElement","download","click","revokeObjectURL","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","htmlFor","accept","id","rows","cols","_c","$RefreshReg$"],"sources":["C:/Users/ashwin/Documents/GitHub/HackSMU/frontend/src/components/NoteModal.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './NoteModal.css';\r\nimport postData from '../ApiAccess';\r\n\r\nfunction NoteModal({ closeModal, addNote }) {\r\n  const [name, setName] = useState('');\r\n  const [text, setText] = useState('');\r\n  const [uploadedFileName, setUploadedFileName] = useState('');\r\n  const [wordCount, setWordCount] = useState(0);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [combined, setCombined] = useState('')\r\n\r\n  const handleNameChange = (e) => {\r\n    const inputName = e.target.value;\r\n    setName(inputName);\r\n  };\r\n\r\n  const handleTextChange = (e) => {\r\n    const inputText = e.target.value;\r\n    setText(inputText);\r\n    const words = inputText.split(/\\s+/).filter((word) => word !== '');\r\n    setWordCount(words.length);\r\n  };\r\n\r\n  const handleFileUpload = (e) => {\r\n    const files = e.target.files;\r\n    if (files && files.length > 0) {\r\n      const file = files[0];\r\n      if (file.type === 'text/plain') {\r\n        const reader = new FileReader();\r\n        reader.onload = (event) => {\r\n          const fileText = event.target.result;\r\n          setText(fileText);\r\n          const words = fileText.split(/\\s+/).filter((word) => word !== '');\r\n          setWordCount(words.length);\r\n          setErrorMessage('');\r\n          setUploadedFileName(file.name); // Set the uploaded file name\r\n        };\r\n        reader.readAsText(file);\r\n      } else {\r\n        setErrorMessage('Please upload a .txt file.');\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  const handleSubmit = () => {\r\n    // Check if either name or text is empty\r\n    if (!name || !text) {\r\n      setErrorMessage('Please fill in both name and text fields.');\r\n    } \r\n    else if (wordCount > 750) {\r\n      // Check if word count exceeds the limit\r\n      setErrorMessage('Word count exceeds the limit (750 words).');\r\n    } else {\r\n      // Create a new note object\r\n      const newNote = {\r\n        name: name,\r\n        text: text,\r\n        wordCount: wordCount,\r\n      };\r\n  \r\n      // Call the addNote function to add the new note to the array\r\n      addNote(newNote);\r\n      console.log(window.location.href.split('3000/')[1]);\r\n      postData(name, window.location.href.split('3000/')[1], text);\r\n  \r\n      // Clear the input fields and word count\r\n      setName('');\r\n      setText('');\r\n      setWordCount(0);\r\n      setErrorMessage('');\r\n  \r\n      // Close the modal\r\n      closeModal();\r\n    }\r\n  };  \r\n\r\n\r\n  const handleDownload = () => {\r\n    const blob = new Blob([text], { type: 'text/plain' });\r\n    const url = window.URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = uploadedFileName || 'uploaded_text.txt';\r\n    a.click();\r\n    window.URL.revokeObjectURL(url);\r\n  };\r\n\r\n  return (\r\n    <div className=\"modal\">\r\n      <div className=\"modal-content\">\r\n        <div className=\"close-button\" onClick={closeModal}>X</div>\r\n        <div className=\"name-input\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Your Name\"\r\n            value={name}\r\n            onChange={handleNameChange}\r\n          />\r\n        </div>\r\n        <div className=\"file-upload\">\r\n          <label htmlFor=\"file-input\" className=\"upload-button\">\r\n            Upload File\r\n          </label>\r\n          <input\r\n            type=\"file\"\r\n            accept=\".txt\"\r\n            id=\"file-input\"\r\n            onChange={handleFileUpload}\r\n            className=\"file-input\"\r\n          />\r\n          {uploadedFileName && (\r\n            <span className=\"uploaded-file-name\">{uploadedFileName}</span>\r\n          )}\r\n        </div>\r\n        <textarea\r\n          rows=\"4\"\r\n          cols=\"50\"\r\n          placeholder=\"Enter text...\"\r\n          onChange={handleTextChange}\r\n          value={text}\r\n          className=\"text-input\"\r\n        />\r\n        <div className=\"word-count-and-button\">\r\n          <span className=\"word-count\">{wordCount}/750 words</span>\r\n          <button\r\n            type=\"submit\"\r\n            className=\"submit-button\"\r\n            onClick={handleSubmit}\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n        {text && (\r\n          <button\r\n            className=\"download-button\"\r\n            type=\"button\"\r\n            onClick={handleDownload}\r\n          >\r\n            Download File\r\n          </button>\r\n        )}\r\n        <div className=\"error-message\">{errorMessage}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NoteModal;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}