{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashwin\\\\Documents\\\\GitHub\\\\HackSMU\\\\frontend\\\\src\\\\Room.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Room.css';\nimport NoteModal from './components/NoteModal';\nimport NoteBanner from './components/NoteBanner';\nimport { postData, getNotesData } from './ApiAccess'; // Correct relative path\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Room() {\n  _s();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [notes, setNotes] = useState([]); // Array to store note objects\n  const [name, setName] = useState('');\n  const [text, setText] = useState('');\n  const [wordCount, setWordCount] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  const handleTextClick = () => {\n    const textToCopy = window.location.href.split('3000/')[1]; // Replace with the actual text you want to copy\n    const textArea = document.createElement('textarea');\n    textArea.value = textToCopy;\n    document.body.appendChild(textArea);\n    textArea.select();\n    document.execCommand('copy');\n    document.body.removeChild(textArea);\n  };\n  const handleNameChange = e => {\n    const inputName = e.target.value;\n    setName(inputName);\n  };\n  const handleTextChange = e => {\n    const inputText = e.target.value;\n    setText(inputText);\n    const words = inputText.split(/\\s+/).filter(word => word !== '');\n    setWordCount(words.length);\n  };\n  const handleFileUpload = e => {\n    const files = e.target.files;\n    if (files && files.length > 0) {\n      const file = files[0];\n      if (file.type === 'text/plain') {\n        const reader = new FileReader();\n        reader.onload = event => {\n          const fileText = event.target.result;\n          setText(fileText);\n          const words = fileText.split(/\\s+/).filter(word => word !== '');\n          setWordCount(words.length);\n          setErrorMessage('');\n        };\n        reader.readAsText(file);\n      } else {\n        setErrorMessage('Please upload a .txt file.');\n      }\n    }\n  };\n  const handleGenerateClick = () => {\n    // Implement the logic to generate something here\n    // You can use this function to generate content or perform any other action you need.\n    console.log('Generate button clicked');\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!name || !text) {\n      // Check if either name or text is empty\n      setErrorMessage('Please fill in both name and text fields.');\n    } else if (wordCount > 750) {\n      // Check if word count exceeds the limit\n      setErrorMessage('Word count exceeds the limit (750 words).');\n    } else {\n      // Create a new note object\n      const newNote = {\n        name: name,\n        text: text,\n        wordCount: wordCount\n      };\n\n      // Add the new note to the notes array\n      console.log('Added new note object: ' + newNote);\n      setNotes([...notes, newNote]);\n      postData(window.location.href.split('3000/')[1], text);\n\n      // Clear the input fields and word count\n      setName('');\n      setText('');\n      setWordCount(0);\n      setErrorMessage('');\n\n      // Close the modal\n      setIsModalOpen(false);\n    }\n  };\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n  const addNote = newNote => {\n    setNotes([...notes, newNote]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Room\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"FuzeNote\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Room Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"copy-text\",\n        onClick: handleTextClick,\n        children: [window.location.href.split('3000/')[1], ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"tooltip\",\n          children: \"Click to Copy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Total Posts: \", notes.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"total-words\",\n        children: [notes.reduce((total, note) => total + note.wordCount, 0), \"/3000 total words permitted\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(NoteModal, {\n      isOpen: isModalOpen,\n      closeModal: closeModal,\n      handleSubmit: handleSubmit,\n      handleNameChange: handleNameChange,\n      handleTextChange: handleTextChange,\n      handleFileUpload: handleFileUpload,\n      errorMessage: errorMessage,\n      name: name,\n      text: text,\n      wordCount: wordCount,\n      addNote: addNote // Pass the addNote function as a prop\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this), notes.map((note, index) => /*#__PURE__*/_jsxDEV(NoteBanner, {\n      note: note,\n      onDelete: noteToDelete => {\n        // Remove the note from the notes array\n        const updatedNotes = notes.filter(note => note !== noteToDelete);\n        setNotes(updatedNotes);\n      },\n      onDownload: noteText => {\n        // Trigger the download of the note text\n        const blob = new Blob([noteText], {\n          type: 'text/plain'\n        });\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = 'note.txt';\n        a.click();\n        window.URL.revokeObjectURL(url);\n      }\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: openModal,\n      className: \"new-note-button\",\n      children: \"New Note\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateClick,\n      className: \"generate-button\",\n      children: \"Generate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n_s(Room, \"8C5p7U6kjqhPkQeYFPpupV6b3Zw=\");\n_c = Room;\nexport default Room;\nvar _c;\n$RefreshReg$(_c, \"Room\");","map":{"version":3,"names":["React","useState","NoteModal","NoteBanner","postData","getNotesData","jsxDEV","_jsxDEV","Room","_s","isModalOpen","setIsModalOpen","notes","setNotes","name","setName","text","setText","wordCount","setWordCount","errorMessage","setErrorMessage","handleTextClick","textToCopy","window","location","href","split","textArea","document","createElement","value","body","appendChild","select","execCommand","removeChild","handleNameChange","e","inputName","target","handleTextChange","inputText","words","filter","word","length","handleFileUpload","files","file","type","reader","FileReader","onload","event","fileText","result","readAsText","handleGenerateClick","console","log","handleSubmit","preventDefault","newNote","openModal","closeModal","addNote","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","reduce","total","note","isOpen","map","index","onDelete","noteToDelete","updatedNotes","onDownload","noteText","blob","Blob","url","URL","createObjectURL","a","download","click","revokeObjectURL","_c","$RefreshReg$"],"sources":["C:/Users/ashwin/Documents/GitHub/HackSMU/frontend/src/Room.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './Room.css';\r\nimport NoteModal from './components/NoteModal';\r\nimport NoteBanner from './components/NoteBanner';\r\nimport { postData, getNotesData } from './ApiAccess'; // Correct relative path\r\n\r\nfunction Room() {\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [notes, setNotes] = useState([]); // Array to store note objects\r\n  const [name, setName] = useState('');\r\n  const [text, setText] = useState('');\r\n  const [wordCount, setWordCount] = useState(0);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  const handleTextClick = () => {\r\n    const textToCopy = window.location.href.split('3000/')[1]; // Replace with the actual text you want to copy\r\n    const textArea = document.createElement('textarea');\r\n    textArea.value = textToCopy;\r\n    document.body.appendChild(textArea);\r\n    textArea.select();\r\n    document.execCommand('copy');\r\n    document.body.removeChild(textArea);\r\n  };\r\n\r\n  const handleNameChange = (e) => {\r\n    const inputName = e.target.value;\r\n    setName(inputName);\r\n  };\r\n\r\n  const handleTextChange = (e) => {\r\n    const inputText = e.target.value;\r\n    setText(inputText);\r\n    const words = inputText.split(/\\s+/).filter((word) => word !== '');\r\n    setWordCount(words.length);\r\n  };\r\n\r\n  const handleFileUpload = (e) => {\r\n    const files = e.target.files;\r\n    if (files && files.length > 0) {\r\n      const file = files[0];\r\n      if (file.type === 'text/plain') {\r\n        const reader = new FileReader();\r\n        reader.onload = (event) => {\r\n          const fileText = event.target.result;\r\n          setText(fileText);\r\n          const words = fileText.split(/\\s+/).filter((word) => word !== '');\r\n          setWordCount(words.length);\r\n          setErrorMessage('');\r\n        };\r\n        reader.readAsText(file);\r\n      } else {\r\n        setErrorMessage('Please upload a .txt file.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleGenerateClick = () => {\r\n    // Implement the logic to generate something here\r\n    // You can use this function to generate content or perform any other action you need.\r\n    console.log('Generate button clicked');\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!name || !text) {\r\n      // Check if either name or text is empty\r\n      setErrorMessage('Please fill in both name and text fields.');\r\n    } else if (wordCount > 750) {\r\n      // Check if word count exceeds the limit\r\n      setErrorMessage('Word count exceeds the limit (750 words).');\r\n    } else {\r\n      // Create a new note object\r\n      const newNote = {\r\n        name: name,\r\n        text: text,\r\n        wordCount: wordCount,\r\n      };\r\n\r\n      // Add the new note to the notes array\r\n      console.log('Added new note object: ' + newNote);\r\n      setNotes([...notes, newNote]);\r\n      postData(window.location.href.split('3000/')[1], text);\r\n\r\n      // Clear the input fields and word count\r\n      setName('');\r\n      setText('');\r\n      setWordCount(0);\r\n      setErrorMessage('');\r\n\r\n      // Close the modal\r\n      setIsModalOpen(false);\r\n    }\r\n  };\r\n\r\n  const openModal = () => {\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  const addNote = (newNote) => {\r\n    setNotes([...notes, newNote]);\r\n  };  \r\n  \r\n  return (\r\n    <div className=\"Room\">\r\n      <h1>FuzeNote</h1>\r\n      <h2>Room Code</h2>\r\n      <p>\r\n        <span className=\"copy-text\" onClick={handleTextClick}>\r\n          {window.location.href.split('3000/')[1]}{' '}\r\n          <span className=\"tooltip\">Click to Copy</span>\r\n        </span>\r\n      </p>\r\n      <p>Total Posts: {notes.length}</p>\r\n      <p>\r\n        <span className=\"total-words\">\r\n          {notes.reduce((total, note) => total + note.wordCount, 0)}/3000 total words permitted\r\n        </span>\r\n      </p>\r\n      <hr />\r\n      {isModalOpen && (\r\n        <NoteModal\r\n          isOpen={isModalOpen}\r\n          closeModal={closeModal}\r\n          handleSubmit={handleSubmit}\r\n          handleNameChange={handleNameChange}\r\n          handleTextChange={handleTextChange}\r\n          handleFileUpload={handleFileUpload}\r\n          errorMessage={errorMessage}\r\n          name={name}\r\n          text={text}\r\n          wordCount={wordCount}\r\n          addNote={addNote} // Pass the addNote function as a prop\r\n        />\r\n      )}\r\n      {notes.map((note, index) => (\r\n        <NoteBanner\r\n          key={index}\r\n          note={note}\r\n          onDelete={(noteToDelete) => {\r\n            // Remove the note from the notes array\r\n            const updatedNotes = notes.filter((note) => note !== noteToDelete);\r\n            setNotes(updatedNotes);\r\n          }}\r\n          onDownload={(noteText) => {\r\n            // Trigger the download of the note text\r\n            const blob = new Blob([noteText], { type: 'text/plain' });\r\n            const url = window.URL.createObjectURL(blob);\r\n            const a = document.createElement('a');\r\n            a.href = url;\r\n            a.download = 'note.txt';\r\n            a.click();\r\n            window.URL.revokeObjectURL(url);\r\n          }}\r\n        />\r\n      ))}\r\n      <button onClick={openModal} className=\"new-note-button\">\r\n        New Note\r\n      </button>\r\n      <div />\r\n      <hr />\r\n      {/* \"Generate\" button */}\r\n      <button onClick={handleGenerateClick} className=\"generate-button\">\r\n        Generate\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Room;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}