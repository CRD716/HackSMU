{"ast":null,"code":"function postData(nam, code, data) {\n  console.log(JSON.stringify({\n    name: nam,\n    roomid: code,\n    text: data\n  }));\n  return fetch('http://localhost:5000/submit-text', {\n    // Update the URL to your local server address\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*'\n    },\n    body: JSON.stringify({\n      name: nam,\n      roomid: code,\n      text: data\n    }) // Send data in JSON format\n  }).then(response => response.json()).then(data => {\n    // Process the response data \n    return data;\n  }).catch(error => {\n    // Handle errors\n    console.log(error);\n  });\n}\n\n// Function to fetch notes data for a specific room\nfunction getNotesData(roomId) {\n  return fetch(`http://localhost:5000/get-notes/${roomId}`, {\n    // Update the URL to your local server address\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*'\n    }\n  }).then(response => response.json()).then(data => {\n    // Process the retrieved notes data\n    return data;\n  }).catch(error => {\n    // Handle errors\n    console.log(error);\n    return [];\n  });\n}\nexport { postData, getNotesData };","map":{"version":3,"names":["postData","nam","code","data","console","log","JSON","stringify","name","roomid","text","fetch","method","headers","body","then","response","json","catch","error","getNotesData","roomId"],"sources":["C:/Users/ashwin/Documents/GitHub/HackSMU/frontend/src/ApiAccess.js"],"sourcesContent":["function postData(nam, code, data) {\r\n  console.log(JSON.stringify({ name: nam, roomid: code, text: data }));\r\n  return fetch('http://localhost:5000/submit-text', { // Update the URL to your local server address\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Access-Control-Allow-Origin': '*'\r\n    },\r\n    body: JSON.stringify({ name: nam, roomid: code, text: data }), // Send data in JSON format\r\n  })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      // Process the response data \r\n      return data;\r\n    })\r\n    .catch(error => {\r\n      // Handle errors\r\n      console.log(error);\r\n    });\r\n}\r\n\r\n// Function to fetch notes data for a specific room\r\nfunction getNotesData(roomId) {\r\n  return fetch(`http://localhost:5000/get-notes/${roomId}`, { // Update the URL to your local server address\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Access-Control-Allow-Origin': '*',\r\n    },\r\n  })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      // Process the retrieved notes data\r\n      return data;\r\n    })\r\n    .catch(error => {\r\n      // Handle errors\r\n      console.log(error);\r\n      return [];\r\n    });\r\n}\r\n\r\nexport { postData, getNotesData };\r\n"],"mappings":"AAAA,SAASA,QAAQA,CAACC,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAE;EACjCC,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,SAAS,CAAC;IAAEC,IAAI,EAAEP,GAAG;IAAEQ,MAAM,EAAEP,IAAI;IAAEQ,IAAI,EAAEP;EAAK,CAAC,CAAC,CAAC;EACpE,OAAOQ,KAAK,CAAC,mCAAmC,EAAE;IAAE;IAClDC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,6BAA6B,EAAE;IACjC,CAAC;IACDC,IAAI,EAAER,IAAI,CAACC,SAAS,CAAC;MAAEC,IAAI,EAAEP,GAAG;MAAEQ,MAAM,EAAEP,IAAI;MAAEQ,IAAI,EAAEP;IAAK,CAAC,CAAC,CAAE;EACjE,CAAC,CAAC,CACCY,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACZ,IAAI,IAAI;IACZ;IACA,OAAOA,IAAI;EACb,CAAC,CAAC,CACDe,KAAK,CAACC,KAAK,IAAI;IACd;IACAf,OAAO,CAACC,GAAG,CAACc,KAAK,CAAC;EACpB,CAAC,CAAC;AACN;;AAEA;AACA,SAASC,YAAYA,CAACC,MAAM,EAAE;EAC5B,OAAOV,KAAK,CAAE,mCAAkCU,MAAO,EAAC,EAAE;IAAE;IAC1DT,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,6BAA6B,EAAE;IACjC;EACF,CAAC,CAAC,CACCE,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACZ,IAAI,IAAI;IACZ;IACA,OAAOA,IAAI;EACb,CAAC,CAAC,CACDe,KAAK,CAACC,KAAK,IAAI;IACd;IACAf,OAAO,CAACC,GAAG,CAACc,KAAK,CAAC;IAClB,OAAO,EAAE;EACX,CAAC,CAAC;AACN;AAEA,SAASnB,QAAQ,EAAEoB,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}